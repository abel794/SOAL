const db = require('../models');
const { Observacion,Estudiante, CategoriaObservacion,Usuario } = db;
const { Op } = require('sequelize');

const observacionController = {

  
  // üìã Obtener observaciones con detalles de estudiante y categor√≠a
  async listarConDetalles(req, res) {
    try {
      const observaciones = await Observacion.findAll({
        include: [
          {
            model: Estudiante,
            attributes: ['nombre'],
          },
          {
            model: CategoriaObservacion,
            attributes: ['nombre_categoria'],
          },
          {
            model: Usuario,
            attributes: ['nombre_usuario'], // Puedes agregar m√°s si necesitas
          }
        ],
        attributes: ['descripcion', 'fecha', 'gravedad'],
      });

      const resultado = observaciones.map(obs => ({
        estudiante: obs.Estudiante.nombre,
        tipo: obs.CategoriaObservacion.nombre_categoria,
        profesor: obs.Usuario.nombre_usuario,
        fecha: obs.fecha,
        gravedad: obs.gravedad,
        observacion: obs.descripcion
      }));

      res.json(resultado);
    } catch (error) {
      console.error('‚ùå Error al obtener observaciones detalladas:', error);
      res.status(500).json({ error: 'Error al obtener observaciones' });
    }
  },

  // üëá (mant√©n aqu√≠ tus otros m√©todos como crear, contar, etc.)


  // Obtener todas las observaciones
  async obtenerTodas(req, res) {
    try {
      const observaciones = await Observacion.findAll();
      res.json(observaciones);
    } catch (error) {
      console.error(error)
      res.status(500).json({ error: 'Error al obtener observaciones' });
    }
  },

  // Obtener una observaci√≥n por ID
  async obtenerPorId(req, res) {
    const id = req.params.id;
    try {
      const observacion = await Observacion.findByPk(id);
      if (observacion) {
        res.json(observacion);
      } else {
        res.status(404).json({ error: 'Observaci√≥n no encontrada' });
      }
    } catch (error) {
      res.status(500).json({ error: 'Error al buscar la observaci√≥n' });
    }
  },

  // Crear una nueva observaci√≥n
  async crear(req, res) {
    try {
      const nueva = await Observacion.create(req.body);
      res.status(201).json(nueva);
    } catch (error) {
      res.status(400).json({ error: 'Error al crear la observaci√≥n', detalle: error.message });
    }
  },

  // Actualizar una observaci√≥n
  async actualizar(req, res) {
    const id = req.params.id;
    try {
      const [filasActualizadas] = await Observacion.update(req.body, {
        where: { id_observacion: id }
      });
      if (filasActualizadas === 0) {
        res.status(404).json({ error: 'Observaci√≥n no encontrada o sin cambios' });
      } else {
        res.json({ mensaje: 'Observaci√≥n actualizada correctamente' });
      }
    } catch (error) {
      res.status(400).json({ error: 'Error al actualizar la observaci√≥n' });
    }
  },

  // Eliminar una observaci√≥n
  async eliminar(req, res) {
    const id = req.params.id;
    try {
      const filasEliminadas = await Observacion.destroy({
        where: { id_observacion: id }
      });
      if (filasEliminadas === 0) {
        res.status(404).json({ error: 'Observaci√≥n no encontrada' });
      } else {
        res.json({ mensaje: 'Observaci√≥n eliminada correctamente' });
      }
    } catch (error) {
      res.status(500).json({ error: 'Error al eliminar la observaci√≥n' });
    }
  },

  // Total de observaciones
  async contarObservaciones(req, res) {
    try {
      const total = await Observacion.count();
      res.json({ totalObservaciones: total });
    } catch (error) {
      res.status(500).json({ error: 'Error al contar observaciones' });
    }
  },

  // Total de observaciones cr√≠ticas
  async contarCriticos(req, res) {
    try {
      const categoria = await CategoriaObservacion.findOne({
        where: { nombre_categoria: 'Disciplinaria' }
      });
      if (!categoria) return res.status(404).json({ error: 'Categor√≠a cr√≠tica no encontrada' });

      const total = await Observacion.count({
        where: { id_categoria: categoria.id_categoria }
      });
      res.json({ observacionesCriticas: total });
    } catch (error) {
      res.status(500).json({ error: 'Error al contar observaciones cr√≠ticas' });
    }
  }
};

module.exports = observacionController;
