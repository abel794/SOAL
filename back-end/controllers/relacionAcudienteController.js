const { Sequelize } = require('sequelize');
const db = require('../models');
const RelacionAcudiente = db.RelacionAcudiente;
const Acudiente = db.Acudiente;

const relacionAcudienteController = {

  // üîç Obtener todas las relaciones (para dropdowns o listados)
  async obtenerTodas(req, res) {
    try {
      const relaciones = await RelacionAcudiente.findAll();
      return res.json(relaciones);
    } catch (error) {
      console.error('Error al obtener relaciones:', error);
      return res.status(500).json({ error: 'Error al obtener las relaciones' });
    }
  },

  // üîç Obtener una relaci√≥n por su ID
  async obtenerPorId(req, res) {
    const id = req.params.id;
    try {
      const relacion = await RelacionAcudiente.findByPk(id);
      if (!relacion) {
        return res.status(404).json({ error: 'Relaci√≥n no encontrada' });
      }
      return res.json(relacion);
    } catch (error) {
      console.error('Error al buscar la relaci√≥n:', error);
      return res.status(500).json({ error: 'Error al buscar la relaci√≥n' });
    }
  },

  // üÜï Crear una nueva relaci√≥n
  async crear(req, res) {
    try {
      const nuevaRelacion = await RelacionAcudiente.create(req.body);
      return res.status(201).json(nuevaRelacion);
    } catch (error) {
      console.error('Error al crear relaci√≥n:', error);
      return res.status(400).json({ error: 'Error al crear la relaci√≥n', detalle: error.message });
    }
  },

  // ‚úèÔ∏è Actualizar una relaci√≥n existente
  async actualizar(req, res) {
    const id = req.params.id;
    try {
      const [filasActualizadas] = await RelacionAcudiente.update(req.body, {
        where: { id_relacion: id }
      });
      if (filasActualizadas === 0) {
        return res.status(404).json({ error: 'Relaci√≥n no encontrada o sin cambios' });
      }
      return res.json({ mensaje: 'Relaci√≥n actualizada correctamente' });
    } catch (error) {
      console.error('Error al actualizar relaci√≥n:', error);
      return res.status(400).json({ error: 'Error al actualizar relaci√≥n', detalle: error.message });
    }
  },

  // ‚ùå Eliminar una relaci√≥n
  async eliminar(req, res) {
    const id = req.params.id;
    try {
      const filasEliminadas = await RelacionAcudiente.destroy({
        where: { id_relacion: id }
      });
      if (filasEliminadas === 0) {
        return res.status(404).json({ error: 'Relaci√≥n no encontrada' });
      }
      return res.json({ mensaje: 'Relaci√≥n eliminada correctamente' });
    } catch (error) {
      console.error('Error al eliminar relaci√≥n:', error);
      return res.status(500).json({ error: 'Error al eliminar relaci√≥n' });
    }
  },

  // üìä Contar cu√°ntos acudientes hay por cada tipo de relaci√≥n
  async contarAcudientesPorRelacion(req, res) {
  try {
    const relaciones = await RelacionAcudiente.findAll({
      include: [{
        model: Acudiente,
        as: 'acudientes',
        attributes: []
      }],
      attributes: [
        'nombre',
        [Sequelize.fn('COUNT', Sequelize.col('acudientes.id_acudiente')), 'cantidad']
      ],
      group: ['RelacionAcudiente.id_relacion']
    });
    return res.json(relaciones);
  } catch (error) {
    console.error('Error al contar acudientes por relaci√≥n:', error);
    return res.status(500).json({ error: 'Error al contar acudientes por relaci√≥n' });
  }
}


};

module.exports = relacionAcudienteController;
