const db = require('../models');
const RelacionAcudiente = db.RelacionAcudiente;
const Acudiente = db.Acudiente;

const relacionAcudienteController = {

  // üîç Obtener todas las relaciones (√∫til para mostrar en dropdowns)
  async obtenerTodas(req, res) {
    try {
      const relaciones = await RelacionAcudiente.findAll();
      res.json(relaciones);
    } catch (error) {
      console.error('Error al obtener relaciones:', error);
      res.status(500).json({ error: 'Error al obtener las relaciones' });
    }
  },

  // üîç Obtener una relaci√≥n por ID
  async obtenerPorId(req, res) {
    try {
      const id = req.params.id;
      const relacion = await RelacionAcudiente.findByPk(id);

      if (!relacion) {
        return res.status(404).json({ error: 'Relaci√≥n no encontrada' });
      }

      res.json(relacion);
    } catch (error) {
      res.status(500).json({ error: 'Error al buscar la relaci√≥n' });
    }
  },

  // üÜï Crear una nueva relaci√≥n
  async crear(req, res) {
    try {
      const nueva = await RelacionAcudiente.create(req.body);
      res.status(201).json(nueva);
    } catch (error) {
      console.error('Error al crear relaci√≥n:', error);
      res.status(400).json({ error: 'Error al crear la relaci√≥n', detalle: error.message });
    }
  },

  // ‚úèÔ∏è Actualizar relaci√≥n existente
  async actualizar(req, res) {
    const id = req.params.id;

    try {
      const [actualizado] = await RelacionAcudiente.update(req.body, {
        where: { id_relacion: id }
      });

      if (actualizado === 0) {
        return res.status(404).json({ error: 'Relaci√≥n no encontrada o sin cambios' });
      }

      res.json({ mensaje: 'Relaci√≥n actualizada correctamente' });
    } catch (error) {
      res.status(400).json({ error: 'Error al actualizar relaci√≥n', detalle: error.message });
    }
  },

  // ‚ùå Eliminar una relaci√≥n
  async eliminar(req, res) {
    const id = req.params.id;

    try {
      const eliminado = await RelacionAcudiente.destroy({
        where: { id_relacion: id }
      });

      if (eliminado === 0) {
        return res.status(404).json({ error: 'Relaci√≥n no encontrada' });
      }

      res.json({ mensaje: 'Relaci√≥n eliminada correctamente' });
    } catch (error) {
      res.status(500).json({ error: 'Error al eliminar relaci√≥n' });
    }
  },

  // üìä Contar cu√°ntos acudientes hay por cada tipo de relaci√≥n
  async contarAcudientesPorRelacion(req, res) {
    try {
      const relaciones = await RelacionAcudiente.findAll({
        include: [{
          model: Acudiente,
          as: 'acudientes',
          attributes: []
        }],
        attributes: [
          'nombre',
          [db.Sequelize.fn('COUNT', db.Sequelize.col('acudientes.id_acudiente')), 'cantidad']
        ],
        group: ['RelacionAcudiente.id_relacion']
      });

      res.json(relaciones);
    } catch (error) {
      console.error('Error al contar acudientes por relaci√≥n:', error);
      res.status(500).json({ error: 'Error al contar acudientes por relaci√≥n' });
    }
  }

};

module.exports = relacionAcudienteController;
