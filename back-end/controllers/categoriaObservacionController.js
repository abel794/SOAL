// Importamos el modelo y operador Sequelize
const db = require('../models');
const CategoriaObservacion = db.CategoriaObservacion;
const { Op } = require('sequelize');

const categoriaObservacionController = {
  // ‚úÖ Obtener todas las categor√≠as
  async obtenerTodas(req, res) {
    try {
      const categorias = await CategoriaObservacion.findAll();
      res.json({
        total: categorias.length,    // üî¢ Total de registros
        categorias                   // üì¶ Lista de resultados
      });
    } catch (error) {
      res.status(500).json({ error: 'Error al obtener categor√≠as' });
    }
  },

  // üîç Buscar por nombre con coincidencia parcial
  async buscarPorNombre(req, res) {
    const { nombre } = req.query;

    if (!nombre || nombre.trim() === '') {
      return res.status(400).json({ error: 'Debes proporcionar ?nombre=' });
    }

    try {
      const resultados = await CategoriaObservacion.findAll({
        where: {
          nombre: {
            [Op.like]: `%${nombre}%`  // üîé Coincidencia flexible
          }
        }
      });

      res.json({
        total: resultados.length,
        resultados
      });
    } catch (error) {
      res.status(500).json({ error: 'Error al buscar por nombre' });
    }
  },

  // üî¢ Contar todas las categor√≠as existentes
  async contarCategorias(req, res) {
    try {
      const total = await CategoriaObservacion.count();
      res.json({ total });
    } catch (error) {
      res.status(500).json({ error: 'Error al contar categor√≠as' });
    }
  },

  // ‚úÖ Obtener una categor√≠a por ID (directo por PK)
  async obtenerPorId(req, res) {
    const id = req.params.id;

    try {
      const categoria = await CategoriaObservacion.findByPk(id);
      if (categoria) {
        res.json(categoria);
      } else {
        res.status(404).json({ error: 'Categor√≠a no encontrada' });
      }
    } catch (error) {
      res.status(500).json({ error: 'Error al buscar categor√≠a' });
    }
  },

  // ‚úÖ Crear una nueva categor√≠a con validaci√≥n
  async crear(req, res) {
    const { nombre } = req.body;

    // Validaci√≥n: campo requerido
    if (!nombre || nombre.trim() === "") {
      return res.status(400).json({ error: 'El nombre de la categor√≠a es obligatorio' });
    }

    try {
      const nueva = await CategoriaObservacion.create({ nombre });
      res.status(201).json(nueva);
    } catch (error) {
      res.status(400).json({ error: 'Error al crear la categor√≠a', detalle: error.message });
    }
  },

  // ‚úÖ Actualizar una categor√≠a con validaci√≥n
  async actualizar(req, res) {
    const id = req.params.id;
    const { nombre } = req.body;

    // Validaci√≥n: no vac√≠o
    if (!nombre || nombre.trim() === "") {
      return res.status(400).json({ error: 'El nombre no puede estar vac√≠o' });
    }

    try {
      const [filas] = await CategoriaObservacion.update(
        { nombre },
        { where: { id_categoria: id } }
      );

      if (filas === 0) {
        res.status(404).json({ error: 'Categor√≠a no encontrada o sin cambios' });
      } else {
        res.json({ mensaje: 'Categor√≠a actualizada correctamente' });
      }
    } catch (error) {
      res.status(400).json({ error: 'Error al actualizar la categor√≠a', detalle: error.message });
    }
  },

  // ‚úÖ Eliminar una categor√≠a por ID
  async eliminar(req, res) {
    const id = req.params.id;

    try {
      const filas = await CategoriaObservacion.destroy({
        where: { id_categoria: id }
      });

      if (filas === 0) {
        res.status(404).json({ error: 'Categor√≠a no encontrada' });
      } else {
        res.json({ mensaje: 'Categor√≠a eliminada correctamente' });
      }
    } catch (error) {
      res.status(500).json({ error: 'Error al eliminar la categor√≠a' });
    }
  }
};

module.exports = categoriaObservacionController;
